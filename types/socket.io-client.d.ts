export = index;
declare function index(uri: any, opts: any): any;
declare namespace index {
  class Manager {
    constructor(uri: any, opts: any);
    nsps: any;
    subs: any;
    opts: any;
    backoff: any;
    readyState: any;
    uri: any;
    connecting: any;
    lastPing: any;
    encoding: any;
    packetBuffer: any;
    encoder: any;
    decoder: any;
    autoConnect: any;
    addEventListener(event: any, fn: any): any;
    cleanup(): void;
    close(): void;
    connect(fn: any, opts: any): any;
    destroy(socket: any): void;
    disconnect(): void;
    emit(event: any, ...args: any[]): any;
    emitAll(...args: any[]): void;
    generateId(nsp: any): any;
    hasListeners(event: any): any;
    listeners(event: any): any;
    maybeReconnectOnOpen(): void;
    off(event: any, fn: any, ...args: any[]): any;
    on(event: any, fn: any): any;
    once(event: any, fn: any): any;
    onclose(reason: any): void;
    ondata(data: any): void;
    ondecoded(packet: any): void;
    onerror(err: any): void;
    onopen(): void;
    onping(): void;
    onpong(): void;
    onreconnect(): void;
    open(fn: any, opts: any): any;
    packet(packet: any): void;
    processPacketQueue(): void;
    randomizationFactor(v: any, ...args: any[]): any;
    reconnect(): any;
    reconnection(v: any, ...args: any[]): any;
    reconnectionAttempts(v: any, ...args: any[]): any;
    reconnectionDelay(v: any, ...args: any[]): any;
    reconnectionDelayMax(v: any, ...args: any[]): any;
    removeAllListeners(event: any, fn: any, ...args: any[]): any;
    removeEventListener(event: any, fn: any, ...args: any[]): any;
    removeListener(event: any, fn: any, ...args: any[]): any;
    socket(nsp: any, opts: any): any;
    timeout(v: any, ...args: any[]): any;
    updateSocketIds(): void;
  }
  class Socket {
    constructor(io: any, nsp: any, opts: any);
    io: any;
    nsp: any;
    json: any;
    ids: any;
    acks: any;
    receiveBuffer: any;
    sendBuffer: any;
    connected: any;
    disconnected: any;
    flags: any;
    query: any;
    ack(id: any): any;
    addEventListener(event: any, fn: any): any;
    binary(binary: any): any;
    close(): any;
    compress(compress: any): any;
    connect(): any;
    destroy(): void;
    disconnect(): any;
    emit(ev: any, ...args: any[]): any;
    emitBuffered(): void;
    hasListeners(event: any): any;
    listeners(event: any): any;
    off(event: any, fn: any, ...args: any[]): any;
    on(event: any, fn: any): any;
    onack(packet: any): void;
    once(event: any, fn: any): any;
    onclose(reason: any): void;
    onconnect(): void;
    ondisconnect(): void;
    onevent(packet: any): void;
    onopen(): void;
    onpacket(packet: any): void;
    open(): any;
    packet(packet: any): void;
    removeAllListeners(event: any, fn: any, ...args: any[]): any;
    removeEventListener(event: any, fn: any, ...args: any[]): any;
    removeListener(event: any, fn: any, ...args: any[]): any;
    send(...args: any[]): any;
    subEvents(): void;
  }
  // Circular reference from index
  const connect: any;
  const managers: {};
  const protocol: number;
}
